import sys
import einops
from dataclasses import dataclass
from transformer_lens import HookedTransformer
from transformer_lens.utils import gelu_new, tokenize_and_concatenate
import torch as t
from torch import Tensor
import torch.nn as nn
import numpy as np
import math
from tqdm import tqdm
from typing import Tuple, List, Optional, Dict
from jaxtyping import Float, Int
from transformers.models.gpt2.tokenization_gpt2_fast import GPT2TokenizerFast
from collections import defaultdict
from rich.table import Table
from rich import print as rprint
import datasets
from torch.utils.data import DataLoader
import wandb
from pathlib import Path
import webbrowser
from dataclasses import dataclass
from model import DemoTransformer, Config

device = t.device("cuda" if t.cuda.is_available() else "cpu")

@dataclass
class TransformerTrainingArgs():
    batch_size = 16
    epochs = 5
    # max_steps_per_epoch = 10
    lr = 1e-3
    weight_decay = 1e-2
    wandb_project: Optional[str] = "demo_gpt2"
    wandb_name: Optional[str] = 'shaheen-ahmed'


class TransformerTrainer:
    def __init__(self, args: TransformerTrainingArgs, model: DemoTransformer, dataset_dict: Dict, model_cfg: Config, loss_fn):
        super().__init__()
        self.model = model
        self.args = args
        self.optimizer = t.optim.AdamW(self.model.parameters(), lr=args.lr, weight_decay=args.weight_decay)
        self.step = 0
        self.dataset_dict = dataset_dict
        self.model_cfg = model_cfg
        self.loss_fn = loss_fn

    def training_step(self, batch: Dict[str, Int[Tensor, "batch seq"]]) -> Float[Tensor, ""]:
        # Isolate tokens in batch dict object
        tokens = batch['tokens'].to(self.model_cfg.device)
        # Pass tokens through model, as a batch, get logits
        logits = self.model(tokens)
        # Grab the probability, generated by our transformer, for selecting the correct token
        loss = -self.loss_fn(logits, tokens).mean()
        # Backpropagate loss
        loss.backward()
        # Update weights
        self.optimizer.step()
        # Zero out gradients
        self.optimizer.zero_grad()
        self.step += 1
        wandb.log({"train_loss": loss}, step=self.step)
        return loss

    def validation_step(self, batch: Dict[str, Int[Tensor, "batch seq"]]):
        tokens = batch["tokens"].to(device)
        logits: Tensor = self.model(tokens)[:, :-1]
        predicted_tokens = logits.argmax(dim=-1)
        correct_predictions = (predicted_tokens == tokens[:, 1:]).flatten()
        return correct_predictions

    def train(self):
        num_batches = len(self.dataset_dict['train']) // self.args.batch_size

        print(f"Length of train_loader: {len(self.dataset_dict['train']) // self.args.batch_size}")

        print ('wandb init below')

        wandb.init(project=self.args.wandb_project, name=self.args.wandb_name, config=self.args)
        print ('wandb init done')

        accuracy = np.nan

        for epoch in range(self.args.epochs):
            progress_bar = tqdm(total=num_batches, desc=f"Epoch {epoch+1}", leave=True)
            for i, batch in enumerate(self.train_loader()):
                loss = self.training_step(batch)
                progress_bar.update()
                progress_bar.set_description(f"Epoch {epoch+1}, loss: {loss:.3f}, accuracy: {accuracy:.2f}")
                # if i >= self.args.max_steps_per_epoch:
                #     break

            correct_predictions = t.concat([self.validation_step(batch) for batch in self.test_loader()])
            accuracy = correct_predictions.float().mean().item()
            wandb.log({"accuracy": accuracy}, step=self.step)

        wandb.finish()

    def train_loader(self) -> DataLoader:
        return DataLoader(self.dataset_dict["train"], batch_size=self.args.batch_size, shuffle=True, num_workers=4, pin_memory=True)

    def test_loader(self) -> DataLoader:
        return DataLoader(self.dataset_dict["test"], batch_size=self.args.batch_size, shuffle=False, num_workers=4, pin_memory=True)
